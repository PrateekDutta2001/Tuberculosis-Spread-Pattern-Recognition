# -*- coding: utf-8 -*-
"""determine the pattern of tuberculosis-hiv-spread.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/163Kzy1gQ2bzOOV9ChKh_2ZBIgDej3tfV
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive 
drive.mount("/gdrive")
# %cd /gdrive

ls

cd/gdrive/My Drive/TB spread pattern

ls

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import plotly.offline as py
import plotly.graph_objs as go
import plotly.express as px
import seaborn as sns
import warnings

df = pd.read_csv('tubercolusis_from 2007_WHO.csv')
df.head()

corrmat = df.corr(method='kendall')
plt.subplots(figsize=(8,6))
sns.heatmap(corrmat, vmax=0.9, square=True)

df.isnull().sum()

df[['Number of prevalent tuberculosis cases (End range)', 'Number of deaths due to tuberculosis, excluding HIV (Start range)', 'Number of deaths due to tuberculosis, excluding HIV (End range)','Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)']] = df[['Number of prevalent tuberculosis cases (End range)', 'Number of deaths due to tuberculosis, excluding HIV (Start range)', 'Number of deaths due to tuberculosis, excluding HIV (End range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)']].fillna('NA')

df = df.fillna(value = {'Number of prevalent tuberculosis cases (End range)' : 'no_info', 
                           'Number of deaths due to tuberculosis, excluding HIV (Start range)' : 'no_info', 
                           'Number of deaths due to tuberculosis, excluding HIV (End range)':'no_info',
                          'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)' : 'no_info',
                           'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)' : 'no_info'})

from sklearn.preprocessing import LabelEncoder
categorical_col = ('Country', 'Number of deaths due to tuberculosis, excluding HIV', 'Number of deaths due to tuberculosis, excluding HIV (Start range)', 'Number of deaths due to tuberculosis, excluding HIV (End range)', 'Number of prevalent tuberculosis cases', 'Number of prevalent tuberculosis cases (Start range)', 'Number of prevalent tuberculosis cases (End range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)', 'Prevalence of tuberculosis (per 100 000 population)', 'Prevalence of tuberculosis (per 100 000 population)(end range)')
for col in categorical_col:
    label = LabelEncoder() 
    label.fit(list(df[col].values)) 
    df[col] = label.transform(list(df[col].values))

print('Shape all_data: {}'.format(df.shape))

from scipy.stats import norm, skew
num_features = df.dtypes[df.dtypes != 'object'].index
skewed_features = df[num_features].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)
skewness = pd.DataFrame({'Skew' :skewed_features})
skewness.head(15)

"""#Skew Visualization - Visualize each numerical feature with distplot"""

numerical_df = df.select_dtypes(exclude='object')
for i in range(len(numerical_df.columns)):
    f, ax = plt.subplots(figsize=(7, 4))
    fig = sns.distplot(numerical_df.iloc[:,i].dropna(), rug=True, hist=False, label='UW', kde_kws={'bw':0.1})
    plt.xlabel(numerical_df.columns[i])

from sklearn.model_selection import train_test_split
df = pd.get_dummies(df) 
X = df[:len(df)]
test = df[len(df):]

X.shape

y = df.Year.values
df.drop(['Year'], axis=1, inplace=True)
df = pd.concat((df, test)).reset_index(drop=True)

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=0)

from sklearn.model_selection import KFold
kfolds = KFold(n_splits=5, shuffle=True, random_state=42)
e_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]
e_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]
alphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]
alphas2 = [0.00005, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]

from sklearn.model_selection import KFold, cross_val_score
from sklearn.preprocessing import RobustScaler
from sklearn.pipeline import make_pipeline
from sklearn.pipeline import Pipeline

from xgboost import XGBRegressor
xgboost = make_pipeline(RobustScaler(),
                        XGBRegressor(learning_rate =0.01, n_estimators=3460, 
                                     max_depth=3,min_child_weight=0 ,
                                     gamma=0, subsample=0.7,
                                     colsample_bytree=0.7,nthread=4,
                                     scale_pos_weight=1,seed=27, 
                                     reg_alpha=0.00006))
xgboost_score = cross_val_score(xgboost, X, y, cv=kfolds, scoring='neg_mean_squared_error')
xgboost_rmse = np.sqrt(-xgboost_score.mean())
print("XGBOOST RMSE: ", xgboost_rmse)
print("XGBOOST STD: ", xgboost_score.std())

df_tunning = df
y = df_tunning.iloc[:,1]
X = pd.concat([df_tunning.iloc[:,0],df_tunning.iloc[:,2:30]], axis=1)

y_model = df.iloc[:,1]
X_model = pd.concat([df_tunning.iloc[:,0],df_tunning.iloc[:,2:30]], axis=1)
y_model.describe()